; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: pushd /home/dario/Documents/repos/clojure/decimals ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless ; popd
; Using host:port 127.0.0.1:35831 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉decimals.core꞉>  ; Use `alt+enter` to evaluate
clj꞉decimals.core꞉> 
; Jack-in done.
clj꞉decimals.core꞉> 
(def binary-str "10101.101")
#'decimals.core/binary-str
clj꞉decimals.core꞉> 
binary-str
"10101.101"
clj꞉decimals.core꞉> 
(bins/split-binary binary-str)
{:integer "10101", :decimal "101"}
clj꞉decimals.core꞉> 
(def parts (bins/split-binary binary-str))
#'decimals.core/parts
clj꞉decimals.core꞉> 
parts
{:integer "10101", :decimal "101"}
clj꞉decimals.core꞉> 
(def int-part (bins/extend-left (:integer parts)))
#'decimals.core/int-part
clj꞉decimals.core꞉> 
int-part
"00010101"
clj꞉decimals.core꞉> 
(def dec-part (bins/extend-right (:decimal parts)))
#'decimals.core/dec-part
clj꞉decimals.core꞉> 
dec-part
"1010"
clj꞉decimals.core꞉> 
(take 4 "10101111")
(\1 \0 \1 \0)
clj꞉decimals.core꞉> 
; Evaluating file: hexadecimal.clj
#'decimals.hexadecimal/bin-to-hexa
clj꞉decimals.hexadecimal꞉> 
(build-hex "10101111" [])
"FA"
clj꞉decimals.hexadecimal꞉> 
#'decimals.hexadecimal/build-hex
clj꞉decimals.hexadecimal꞉> 
(build-hex "10101111" [])
"AF"
clj꞉decimals.hexadecimal꞉> 
; Evaluating file: hexadecimal.clj
#'decimals.hexadecimal/bin-to-hexa
clj꞉decimals.hexadecimal꞉> 
(bin-to-hexa "101.01110")
"5.70"
clj꞉decimals.hexadecimal꞉> 
(bin-to-hexa "101.01111")
"5.78"
clj꞉decimals.hexadecimal꞉> 
(bin-to-hexa "101.11111")
"5.F8"
clj꞉decimals.hexadecimal꞉> 
(bin-to-hexa "1011101011.11111")
"2EB.F8"
clj꞉decimals.hexadecimal꞉> 
